security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: ~ }
        simple_user_provider:
            entity:
                class: App:User
                # property: username
                # if you're using multiple entity managers
                # manager_name: customer
    firewalls:
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            provider: simple_user_provider
            json_login:
                check_path:               /api/login_check
                username_path:            email
                password_path:            password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            anonymous: true
            provider: simple_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: home_page
            logout: 
                path: app_logout
            provider: simple_user_provider
            guard:
                authenticators:
                    - App\Security\AppCustomAuthenticator

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register,       roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin,       roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api$,       roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/*,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/, roles: ROLE_USER }
